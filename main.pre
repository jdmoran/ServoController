
# 1 "C:\code\@oopl\!ServoController_v4\main.c"

# 21 "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\include\pic16f685.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
unsigned char T1CON @ 0x010;

volatile unsigned char TMR2 @ 0x011;
unsigned char T2CON @ 0x012;


volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;


volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;


volatile unsigned char RCSTA @ 0x018;
volatile unsigned char TXREG @ 0x019;
volatile unsigned char RCREG @ 0x01A;


volatile unsigned char PWM1CON @ 0x01C;
volatile unsigned char ECCPAS @ 0x01D;


volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;

unsigned char OPTION @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
unsigned char PIE1 @ 0x08C;
unsigned char PIE2 @ 0x08D;
volatile unsigned char PCON @ 0x08E;
volatile unsigned char OSCCON @ 0x08F;
unsigned char OSCTUNE @ 0x090;

unsigned char PR2 @ 0x092;


unsigned char SSPADD @ 0x093;

unsigned char SSPMSK @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;

unsigned char WPUA @ 0x095;
unsigned char IOCA @ 0x096;
volatile unsigned char WDTCON @ 0x097;

volatile unsigned char TXSTA @ 0x098;
unsigned char SPBRG @ 0x099;
unsigned char SPBRGH @ 0x09A;
volatile unsigned char BAUDCTL @ 0x09B;


volatile unsigned char ADRESL @ 0x09E;
unsigned char ADCON1 @ 0x09F;

volatile unsigned char EEDAT @ 0x10C;

volatile unsigned char EEDATA @ 0x10C;

volatile unsigned char EEDATL @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;

volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;

unsigned char WPUB @ 0x115;
unsigned char IOCB @ 0x116;
unsigned char VRCON @ 0x118;
volatile unsigned char CM1CON0 @ 0x119;
volatile unsigned char CM2CON0 @ 0x11A;
volatile unsigned char CM2CON1 @ 0x11B;
unsigned char ANSEL @ 0x11E;

unsigned char ANSELH @ 0x11F;

volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;

volatile unsigned char PSTRCON @ 0x19D;

volatile unsigned char SRCON @ 0x19E;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
bit RP0 @ ((unsigned)&STATUS*8)+5;
bit RP1 @ ((unsigned)&STATUS*8)+6;
bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;


volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RABIF @ ((unsigned)&INTCON*8)+0;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
bit RABIE @ ((unsigned)&INTCON*8)+3;

bit RBIE @ ((unsigned)&INTCON*8)+3;
bit INTE @ ((unsigned)&INTCON*8)+4;
bit T0IE @ ((unsigned)&INTCON*8)+5;
bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;

volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;


volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;


volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;


volatile bit ADIF @ ((unsigned)&PIR1*8)+6;



volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;
volatile bit OSFIF @ ((unsigned)&PIR2*8)+7;


bit TMR1ON @ ((unsigned)&T1CON*8)+0;
bit TMR1CS @ ((unsigned)&T1CON*8)+1;
bit T1SYNC @ ((unsigned)&T1CON*8)+2;
bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
bit TMR1GE @ ((unsigned)&T1CON*8)+6;
bit T1GINV @ ((unsigned)&T1CON*8)+7;



bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
bit TMR2ON @ ((unsigned)&T2CON*8)+2;
bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;




bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
bit CKP @ ((unsigned)&SSPCON*8)+4;
bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;




bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
bit P1M1 @ ((unsigned)&CCP1CON*8)+7;




volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
bit ADDEN @ ((unsigned)&RCSTA*8)+3;
bit CREN @ ((unsigned)&RCSTA*8)+4;
bit SREN @ ((unsigned)&RCSTA*8)+5;
bit RX9 @ ((unsigned)&RCSTA*8)+6;
bit SPEN @ ((unsigned)&RCSTA*8)+7;




volatile bit PDC0 @ ((unsigned)&PWM1CON*8)+0;
volatile bit PDC1 @ ((unsigned)&PWM1CON*8)+1;
volatile bit PDC2 @ ((unsigned)&PWM1CON*8)+2;
volatile bit PDC3 @ ((unsigned)&PWM1CON*8)+3;
volatile bit PDC4 @ ((unsigned)&PWM1CON*8)+4;
volatile bit PDC5 @ ((unsigned)&PWM1CON*8)+5;
volatile bit PDC6 @ ((unsigned)&PWM1CON*8)+6;
volatile bit PRSEN @ ((unsigned)&PWM1CON*8)+7;


bit PSSBD0 @ ((unsigned)&ECCPAS*8)+0;
bit PSSBD1 @ ((unsigned)&ECCPAS*8)+1;
bit PSSAC0 @ ((unsigned)&ECCPAS*8)+2;
bit PSSAC1 @ ((unsigned)&ECCPAS*8)+3;
bit ECCPAS0 @ ((unsigned)&ECCPAS*8)+4;
bit ECCPAS1 @ ((unsigned)&ECCPAS*8)+5;
bit ECCPAS2 @ ((unsigned)&ECCPAS*8)+6;
volatile bit ECCPASE @ ((unsigned)&ECCPAS*8)+7;




bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
bit CHS0 @ ((unsigned)&ADCON0*8)+2;
bit CHS1 @ ((unsigned)&ADCON0*8)+3;
bit CHS2 @ ((unsigned)&ADCON0*8)+4;
bit CHS3 @ ((unsigned)&ADCON0*8)+5;
bit VCFG @ ((unsigned)&ADCON0*8)+6;
bit ADFM @ ((unsigned)&ADCON0*8)+7;



bit PS0 @ ((unsigned)&OPTION*8)+0;
bit PS1 @ ((unsigned)&OPTION*8)+1;
bit PS2 @ ((unsigned)&OPTION*8)+2;
bit PSA @ ((unsigned)&OPTION*8)+3;
bit T0SE @ ((unsigned)&OPTION*8)+4;
bit T0CS @ ((unsigned)&OPTION*8)+5;
bit INTEDG @ ((unsigned)&OPTION*8)+6;
bit RABPU @ ((unsigned)&OPTION*8)+7;

bit RBPU @ ((unsigned)&OPTION*8)+7;


bit TRISA0 @ ((unsigned)&TRISA*8)+0;
bit TRISA1 @ ((unsigned)&TRISA*8)+1;
bit TRISA2 @ ((unsigned)&TRISA*8)+2;
bit TRISA3 @ ((unsigned)&TRISA*8)+3;
bit TRISA4 @ ((unsigned)&TRISA*8)+4;
bit TRISA5 @ ((unsigned)&TRISA*8)+5;


volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;


bit TMR1IE @ ((unsigned)&PIE1*8)+0;

bit TMR2IE @ ((unsigned)&PIE1*8)+1;
bit CCP1IE @ ((unsigned)&PIE1*8)+2;


bit SSPIE @ ((unsigned)&PIE1*8)+3;


bit TXIE @ ((unsigned)&PIE1*8)+4;
bit RCIE @ ((unsigned)&PIE1*8)+5;


bit ADIE @ ((unsigned)&PIE1*8)+6;



bit EEIE @ ((unsigned)&PIE2*8)+4;
bit C1IE @ ((unsigned)&PIE2*8)+5;
bit C2IE @ ((unsigned)&PIE2*8)+6;
bit OSFIE @ ((unsigned)&PIE2*8)+7;


volatile bit BOR @ ((unsigned)&PCON*8)+0;
volatile bit POR @ ((unsigned)&PCON*8)+1;
bit SBOREN @ ((unsigned)&PCON*8)+4;
bit ULPWUE @ ((unsigned)&PCON*8)+5;


bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit LTS @ ((unsigned)&OSCCON*8)+1;
volatile bit HTS @ ((unsigned)&OSCCON*8)+2;
volatile bit OSTS @ ((unsigned)&OSCCON*8)+3;
bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;



volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
bit CKE @ ((unsigned)&SSPSTAT*8)+6;
bit SMP @ ((unsigned)&SSPSTAT*8)+7;



bit WPUA0 @ ((unsigned)&WPUA*8)+0;
bit WPUA1 @ ((unsigned)&WPUA*8)+1;
bit WPUA2 @ ((unsigned)&WPUA*8)+2;
bit WPUA4 @ ((unsigned)&WPUA*8)+4;
bit WPUA5 @ ((unsigned)&WPUA*8)+5;


bit IOCA0 @ ((unsigned)&IOCA*8)+0;
bit IOCA1 @ ((unsigned)&IOCA*8)+1;
bit IOCA2 @ ((unsigned)&IOCA*8)+2;
bit IOCA3 @ ((unsigned)&IOCA*8)+3;
bit IOCA4 @ ((unsigned)&IOCA*8)+4;
bit IOCA5 @ ((unsigned)&IOCA*8)+5;


bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;



volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
bit BRGH @ ((unsigned)&TXSTA*8)+2;
bit SENDB @ ((unsigned)&TXSTA*8)+3;
bit SYNC @ ((unsigned)&TXSTA*8)+4;
bit TXEN @ ((unsigned)&TXSTA*8)+5;
bit TX9 @ ((unsigned)&TXSTA*8)+6;
bit CSRC @ ((unsigned)&TXSTA*8)+7;


bit BRG0 @ ((unsigned)&SPBRG*8)+0;
bit BRG1 @ ((unsigned)&SPBRG*8)+1;
bit BRG2 @ ((unsigned)&SPBRG*8)+2;
bit BRG3 @ ((unsigned)&SPBRG*8)+3;
bit BRG4 @ ((unsigned)&SPBRG*8)+4;
bit BRG5 @ ((unsigned)&SPBRG*8)+5;
bit BRG6 @ ((unsigned)&SPBRG*8)+6;
bit BRG7 @ ((unsigned)&SPBRG*8)+7;


bit BRG8 @ ((unsigned)&SPBRGH*8)+0;
bit BRG9 @ ((unsigned)&SPBRGH*8)+1;
bit BRG10 @ ((unsigned)&SPBRGH*8)+2;
bit BRG11 @ ((unsigned)&SPBRGH*8)+3;
bit BRG12 @ ((unsigned)&SPBRGH*8)+4;
bit BRG13 @ ((unsigned)&SPBRGH*8)+5;
bit BRG14 @ ((unsigned)&SPBRGH*8)+6;
bit BRG15 @ ((unsigned)&SPBRGH*8)+7;


volatile bit ABDEN @ ((unsigned)&BAUDCTL*8)+0;
volatile bit WUE @ ((unsigned)&BAUDCTL*8)+1;
bit BRG16 @ ((unsigned)&BAUDCTL*8)+3;
volatile bit SCKP @ ((unsigned)&BAUDCTL*8)+4;
volatile bit RCIDL @ ((unsigned)&BAUDCTL*8)+6;
volatile bit ABDOVF @ ((unsigned)&BAUDCTL*8)+7;




bit ADCS0 @ ((unsigned)&ADCON1*8)+4;
bit ADCS1 @ ((unsigned)&ADCON1*8)+5;
bit ADCS2 @ ((unsigned)&ADCON1*8)+6;



bit WPUB4 @ ((unsigned)&WPUB*8)+4;
bit WPUB5 @ ((unsigned)&WPUB*8)+5;
bit WPUB6 @ ((unsigned)&WPUB*8)+6;
bit WPUB7 @ ((unsigned)&WPUB*8)+7;


bit IOCB4 @ ((unsigned)&IOCB*8)+4;
bit IOCB5 @ ((unsigned)&IOCB*8)+5;
bit IOCB6 @ ((unsigned)&IOCB*8)+6;
bit IOCB7 @ ((unsigned)&IOCB*8)+7;


bit VR0 @ ((unsigned)&VRCON*8)+0;
bit VR1 @ ((unsigned)&VRCON*8)+1;
bit VR2 @ ((unsigned)&VRCON*8)+2;
bit VR3 @ ((unsigned)&VRCON*8)+3;
bit VP6EN @ ((unsigned)&VRCON*8)+4;
bit VRR @ ((unsigned)&VRCON*8)+5;
bit C2VREN @ ((unsigned)&VRCON*8)+6;
bit C1VREN @ ((unsigned)&VRCON*8)+7;


bit C1CH0 @ ((unsigned)&CM1CON0*8)+0;
bit C1CH1 @ ((unsigned)&CM1CON0*8)+1;
bit C1R @ ((unsigned)&CM1CON0*8)+2;
bit C1POL @ ((unsigned)&CM1CON0*8)+4;
bit C1OE @ ((unsigned)&CM1CON0*8)+5;
volatile bit C1OUT @ ((unsigned)&CM1CON0*8)+6;
bit C1ON @ ((unsigned)&CM1CON0*8)+7;


bit C2CH0 @ ((unsigned)&CM2CON0*8)+0;
bit C2CH1 @ ((unsigned)&CM2CON0*8)+1;
bit C2R @ ((unsigned)&CM2CON0*8)+2;
bit C2POL @ ((unsigned)&CM2CON0*8)+4;
bit C2OE @ ((unsigned)&CM2CON0*8)+5;
volatile bit C2OUT @ ((unsigned)&CM2CON0*8)+6;
bit C2ON @ ((unsigned)&CM2CON0*8)+7;


bit C2SYNC @ ((unsigned)&CM2CON1*8)+0;
bit T1GSS @ ((unsigned)&CM2CON1*8)+1;
volatile bit MC2OUT @ ((unsigned)&CM2CON1*8)+6;
volatile bit MC1OUT @ ((unsigned)&CM2CON1*8)+7;


bit ANS0 @ ((unsigned)&ANSEL*8)+0;
bit ANS1 @ ((unsigned)&ANSEL*8)+1;
bit ANS2 @ ((unsigned)&ANSEL*8)+2;
bit ANS3 @ ((unsigned)&ANSEL*8)+3;
bit ANS4 @ ((unsigned)&ANSEL*8)+4;
bit ANS5 @ ((unsigned)&ANSEL*8)+5;
bit ANS6 @ ((unsigned)&ANSEL*8)+6;
bit ANS7 @ ((unsigned)&ANSEL*8)+7;



bit ANS8 @ ((unsigned)&ANSELH*8)+0;
bit ANS9 @ ((unsigned)&ANSELH*8)+1;
bit ANS10 @ ((unsigned)&ANSELH*8)+2;
bit ANS11 @ ((unsigned)&ANSELH*8)+3;



volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;

volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


volatile bit STRA @ ((unsigned)&PSTRCON*8)+0;
volatile bit STRB @ ((unsigned)&PSTRCON*8)+1;
volatile bit STRC @ ((unsigned)&PSTRCON*8)+2;
volatile bit STRD @ ((unsigned)&PSTRCON*8)+3;
volatile bit STRSYNC @ ((unsigned)&PSTRCON*8)+4;



volatile bit PULSR @ ((unsigned)&SRCON*8)+2;
volatile bit PULSS @ ((unsigned)&SRCON*8)+3;
bit C2REN @ ((unsigned)&SRCON*8)+4;
bit C1SEN @ ((unsigned)&SRCON*8)+5;
bit SR0 @ ((unsigned)&SRCON*8)+6;
bit SR1 @ ((unsigned)&SRCON*8)+7;

# 392 "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\include\pic.h"
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 465 "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 4 "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 11 "C:\code\@oopl\!ServoController_v4\config_menu.h"
void Start_Config_Menu(char *);

# 15 "C:\code\@oopl\!ServoController_v4\main.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x00F4");

# 45
const unsigned short positionTable[256] = {
64092 , 64081 , 64069 , 64057 , 64046 , 64034 , 64022 , 64010 ,
63999 , 63987 , 63975 , 63963 , 63952 , 63940 , 63928 , 63917 ,
63905 , 63893 , 63881 , 63870 , 63858 , 63846 , 63834 , 63823 ,
63811 , 63799 , 63788 , 63776 , 63764 , 63752 , 63741 , 63729 ,
63717 , 63705 , 63694 , 63682 , 63670 , 63658 , 63647 , 63635 ,
63623 , 63612 , 63600 , 63588 , 63576 , 63565 , 63553 , 63541 ,
63529 , 63518 , 63506 , 63494 , 63483 , 63471 , 63459 , 63447 ,
63436 , 63424 , 63412 , 63400 , 63389 , 63377 , 63365 , 63354 ,
63342 , 63330 , 63318 , 63307 , 63295 , 63283 , 63271 , 63260 ,
63248 , 63236 , 63224 , 63213 , 63201 , 63189 , 63178 , 63166 ,
63154 , 63142 , 63131 , 63119 , 63107 , 63095 , 63084 , 63072 ,
63060 , 63049 , 63037 , 63025 , 63013 , 63002 , 62990 , 62978 ,
62966 , 62955 , 62943 , 62931 , 62919 , 62908 , 62896 , 62884 ,
62873 , 62861 , 62849 , 62837 , 62826 , 62814 , 62802 , 62790 ,
62779 , 62767 , 62755 , 62744 , 62732 , 62720 , 62708 , 62697 ,
62685 , 62673 , 62661 , 62650 , 62638 , 62626 , 62615 , 62603 ,
62591 , 62579 , 62568 , 62556 , 62544 , 62532 , 62521 , 62509 ,
62497 , 62485 , 62474 , 62462 , 62450 , 62439 , 62427 , 62415 ,
62403 , 62392 , 62380 , 62368 , 62356 , 62345 , 62333 , 62321 ,
62310 , 62298 , 62286 , 62274 , 62263 , 62251 , 62239 , 62227 ,
62216 , 62204 , 62192 , 62181 , 62169 , 62157 , 62145 , 62134 ,
62122 , 62110 , 62098 , 62087 , 62075 , 62063 , 62051 , 62040 ,
62028 , 62016 , 62005 , 61993 , 61981 , 61969 , 61958 , 61946 ,
61934 , 61922 , 61911 , 61899 , 61887 , 61876 , 61864 , 61852 ,
61840 , 61829 , 61817 , 61805 , 61793 , 61782 , 61770 , 61758 ,
61746 , 61735 , 61723 , 61711 , 61700 , 61688 , 61676 , 61664 ,
61653 , 61641 , 61629 , 61617 , 61606 , 61594 , 61582 , 61571 ,
61559 , 61547 , 61535 , 61524 , 61512 , 61500 , 61488 , 61477 ,
61465 , 61453 , 61442 , 61430 , 61418 , 61406 , 61395 , 61383 ,
61371 , 61359 , 61348 , 61336 , 61324 , 61312 , 61301 , 61289 ,
61277 , 61266 , 61254 , 61242 , 61230 , 61219 , 61207 , 61195 ,
61183 , 61172 , 61160 , 61148 , 61137 , 61125 , 61113 , 61101
};

# 93
unsigned short T1;

char baud_detected = 0;

char command_received = 0;

char servo;
unsigned short pos[8];

void I2C_CommandParser(unsigned char);
void UART_CommandParser(unsigned char);
void Initialize();
void Serial_Initialize(unsigned char);


void interrupt interrupt_controller(void)
{
unsigned char rx_byte;

if(RCIF)
{
if(!baud_detected)
{
SPBRG = SPBRG;
rx_byte = RCREG;
TXREG = 'D';
baud_detected = 1;
SPBRG--;
}
else
{
rx_byte = RCREG;
UART_CommandParser(rx_byte);
}
}

if(SSPIF)
{
if(SSPOV)
{
SSPOV = 0;
}

rx_byte = SSPBUF;

if(DA == 1)
{
I2C_CommandParser(rx_byte);
}

SSPIF = 0;
}

if(T0IF)
{
RB7 = ~RB7;

TMR0 = 101;

PORTC = PORTC & ~(1 << servo);

servo = (servo + 1) % 8;

PORTC = PORTC | (1 << servo);

TMR1H = pos[servo] >> 8;
TMR1L = pos[servo] & 0x00FF;

TMR1ON = 1;
TMR1IF = 0;
T0IF = 0;
}
else if(TMR1IF)
{
PORTC = PORTC & ~(1 << servo);
TMR1ON = 0;
}
}

# 182
void I2C_CommandParser(unsigned char byte)
{
static char current_command;
static char next_arg;

static char current_servo;

if(!command_received)
{
current_command = byte;
command_received = 1;
}
else if(command_received)
{
if(current_command == 0x01)
{
if(next_arg == 0)
{
current_servo = byte;
TRISC = TRISC & ~(1 << current_servo);
next_arg++;
}
else if(next_arg == 1)
{
pos[current_servo] = positionTable[byte];
next_arg = 0;


command_received = 0;
current_command = 0;
current_servo = 0;
}
}
else if(current_command == 0x0D)
{
if(next_arg == 0)
{
current_servo = byte;
TRISC = TRISC | (1 << current_servo);


command_received = 0;
current_command = 0;
}
}
else if(current_command == 0x52)
{

}
else
{

command_received = 0;
current_command = 0;
next_arg = 0;
}
}
}

# 250
void UART_CommandParser(unsigned char byte)
{
static char accept_serial = 0;
static char current_command;
static char next_arg;

static char menu_start = 0;
static char accept_config = 0;
static char config_string[6];

static char current_servo;

# 298
if(!accept_serial && byte == 0x55)
{
accept_serial = 1;
}
else if(accept_serial)
{
if(!command_received)
{
current_command = byte;
command_received = 1;
}
else if(command_received)
{
if(current_command == 0x01)
{
if(next_arg == 0)
{
current_servo = byte;
TRISC = TRISC & ~(1 << current_servo);
next_arg++;
}
else if(next_arg == 1)
{
pos[current_servo] = positionTable[byte];
next_arg = 0;
accept_serial = 0;

command_received = 0;
current_command = 0;
current_servo = 0;

TXREG = 0x42;
}
}
else if(current_command == 0x0D)
{
if(next_arg == 0)
{
current_servo = byte;
TRISC = TRISC | (1 << current_servo);
accept_serial = 0;

command_received = 0;
current_command = 0;

TXREG = 0x42;
}
}
else if(current_command == 0x52)
{

}
}
}
}


void Initialize()
{
OSCCON = 0b01110001;
while(HTS == 0);

TRISC = 0xFF;
ANSEL = 0x00;
ANSELH = 0x00;
OPTION = 0x84;
PORTC = 0;
T1CON = 0;
TRISA = 0xDB;
WPUA = 0x00;


for(servo = 0; servo < 8; servo++)
{
pos[servo] = positionTable[127];

}

servo = 0;

TMR1H = 4580 >> 8;
TMR1L = 4580 & 0x00FF;

TMR1IF = 0;
TMR1IE = 1;
TMR1ON = 1;

TMR0 = 101;
T0IE = 1;

PORTC = PORTC | (1 << servo);

Serial_Initialize(RA4);

PEIE = 1;
GIE = 1;


TRISB7 = 0;
}

void Serial_Initialize(unsigned char mode)
{

baud_detected = 0;

TRISB4 = 0;
TRISB6 = 0;
SSPCON = 0;
SSPMSK = 0;
SSPCON = 0;
SSPADD = 0;
SSPSTAT = 0;
SSPIE = 0;
SPBRGH = 0;
SPBRG = 0;
BRGH = 0;
BRG16 = 0;
TXSTA = 0;
RCSTA = 0;
SCKP = 0;
RCIE = 0;


if(mode)
{
TRISB4 = 1;
TRISB6 = 1;


SSPCON = 0b00111001;




SSPMSK = 0xFF;
SSPCON = 0b00110110;
SSPADD = 0;



SSPSTAT = 0;

SSPIE = 1;

}
else
{

SPBRGH = 0;
SPBRG = 0;

# 456
BRGH = 1;
BRG16 = 1;

TXSTA = 0b00100100;
RCSTA = 0b10010000;
SCKP = 0;

RCIE = 1;

}
}

int main()
{
unsigned char rx_byte;
unsigned char serial_state = RA4;

GIE = 0;
Initialize();


if(!baud_detected && !RA4)
{
ABDEN = 1;
}

while(1)
{

RA2 = serial_state;
RA5 = !serial_state;

if(serial_state != RA4)
{
serial_state = RA4;
Serial_Initialize(serial_state);
}
}
}
